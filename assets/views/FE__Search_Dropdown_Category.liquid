{% assign categoryIDs = queries.categoryIDs[0] %}
{% assign hrefCategory = "/shop/search?" | append: keyParam | append: minPriceParam | append: maxPriceParam | append: providerIDsParam | append: brandIDsParam | append: isPromotionParam | append: orderFieldParam | append: tagsParam %}

<div class="flex flex-col gap-2">
  <p class="text-body-2 text-neutral-1-900">Danh mục:</p>
  <div class="w-full flex relative bg-white dropdown scrollbar">
    <button class="dropdown-btn flex w-full justify-between items-center gap-2 pl-3 border border-neutral-2-200 rounded md:w-full">
      {% if categoryIDs == nil %}
        {% assign selectedAll = "text-secondary-1 font-medium justify-between icon-selected" %}
        <p class="text-body-2 text-neutral-1-900 ">Tất cả</p>
      {% else %}
        <p id="category-title" class="text-body-2 text-neutral-1-900 line-clamp-1">Tất cả</p>
      {% endif %}
      <span class="twi-17-arrow-down-line text-2xl leading-6 text-neutral-1-500 p-3"></span>
    </button>
    <div class="dropdown-panel absolute top-[50px] right-0 py-2 z-20 w-full hidden max-h-[338px] overflow-y-hidden">
      <ul id="dropdown-category-product" class="flex flex-col w-full bg-white overflow-y-scroll rounded border border-neutral-2-200 shadow-dropdown">
        <li>
          <a href="{{ hrefCategory | prepend: '~' | absolute_url | raw}}" class="w-full flex px-4 py-3 text-body-2 {{ selectedAll }}">Tất cả</a>
        </li>
      </ul>
    </div>

  </div>
</div>

{% scriptblock depends_on: "jQuery", at: "Foot" %}

  function createNode(element) {
  return document.createElement(element);
    }
    
    function append(parent, el) {
      return parent.appendChild(el);
    }
    
    const baseUrl = document.getElementsByTagName("server")[0].getAttribute("href");
    const ul = document.getElementById("dropdown-category-product");
    const urlAPI = baseUrl + "/odata_products/PCategories/GetAllCategories()";
    
    let categoryIDs = "{{ categoryIDs | raw }}";
  let categoryIDsUp = "";
    let hrefCategory = "{{ hrefCategory | raw }}";
  let categoryIDsArr = categoryIDs.split(",");
    
    let categories;
    
    fetch(urlAPI)
      .then((resp) => resp.json())
      .then(function (data) {    
        categories = data.value;
        return categories.map(function (category) {
          if (document.getElementById("category-title")) {
              addTitleCategory(categories);
            }
            let categoryIDsParam = "&categoryIDs=" + category.id;
            hrefCategoryUp = hrefCategory + categoryIDsParam;
            let li = createNode("li"),
            aTag = createNode("a");
            aTag.href = baseUrl + hrefCategoryUp;
            if(categoryIDs != ''){
                if(category.id == categoryIDsArr[categoryIDsArr.length - 1]){
                    aTag.className = "w-full flex px-4 py-3 text-body-2 text-secondary-1 font-medium justify-between icon-selected";
                }
    			else{
            		aTag.className = "w-full flex px-4 py-3 text-body-2";
            	}
            }
    		else{
            	aTag.className = "w-full flex px-4 py-3 text-body-2";
            }
            aTag.innerHTML = `${category.title}`;
            append(li, aTag);
            append(ul, li);
            
        });
      })
      .catch(function (error) {
        console.log(error);
      });
    
      function isInclude(idCategory) {
      let flag = false;
      if (categoryIDsArr.includes(idCategory)) {
        flag = true;
      } else {
        flag = false;
      }
      return flag;
    }
    
    function addTitleCategory(categoriesData) {
      if(categoriesData)
     {
      let categorySelected = categoriesData.find((category) => {
        return category.id == categoryIDsArr[categoryIDsArr.length - 1];
      });
      document.getElementById("category-title").innerHTML = categorySelected.title;
     }
    }{% endscriptblock %}